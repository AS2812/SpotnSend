import pg from 'pg';

const { Client } = pg;

const requiredFunctions = [
  '_postgis_deprecate',
  '_postgis_index_extent',
  '_postgis_join_selectivity',
  '_postgis_pgsql_version',
  '_postgis_scripts_pgsql_version',
  '_postgis_selectivity',
  '_postgis_stats',
  '_st_3ddfullywithin',
  '_st_3ddwithin',
  '_st_3dintersects',
  '_st_asgml',
  '_st_asx3d',
  '_st_bestsrid',
  '_st_contains',
  '_st_containsproperly',
  '_st_coveredby',
  '_st_covers',
  '_st_crosses',
  '_st_dfullywithin',
  '_st_distancetree',
  '_st_distanceuncached',
  '_st_dwithin',
  '_st_dwithinuncached',
  '_st_equals',
  '_st_expand',
  '_st_geomfromgml',
  '_st_intersects',
  '_st_linecrossingdirection',
  '_st_longestline',
  '_st_maxdistance',
  '_st_orderingequals',
  '_st_overlaps',
  '_st_pointoutside',
  '_st_sortablehash',
  '_st_touches',
  '_st_voronoi',
  '_st_within',
  'addauth',
  'addgeometrycolumn',
  'box',
  'box2d',
  'box2d_in',
  'box2d_out',
  'box2df_in',
  'box2df_out',
  'box3d',
  'box3d_in',
  'box3d_out',
  'box3dtobox',
  'bytea',
  'checkauth',
  'checkauthtrigger',
  'citext',
  'citext_cmp',
  'citext_eq',
  'citext_ge',
  'citext_gt',
  'citext_hash',
  'citext_hash_extended',
  'citext_larger',
  'citext_le',
  'citext_lt',
  'citext_ne',
  'citext_pattern_cmp',
  'citext_pattern_ge',
  'citext_pattern_gt',
  'citext_pattern_le',
  'citext_pattern_lt',
  'citext_smaller',
  'citextin',
  'citextout',
  'citextrecv',
  'citextsend',
  'contains_2d',
  'create_bug_report',
  'create_report',
  'create_report_simple',
  'current_user_id',
  'disablelongtransactions',
  'dropgeometrycolumn',
  'dropgeometrytable',
  'enablelongtransactions',
  'ensure_profile',
  'ensure_user',
  'ensure_user_row',
  'equals',
  'find_authorities_nearby',
  'find_reports_nearby',
  'find_srid',
  'geog_brin_inclusion_add_value',
  'geography',
  'geography_analyze',
  'geography_cmp',
  'geography_distance_knn',
  'geography_eq',
  'geography_ge',
  'geography_gist_compress',
  'geography_gist_consistent',
  'geography_gist_decompress',
  'geography_gist_distance',
  'geography_gist_penalty',
  'geography_gist_picksplit',
  'geography_gist_same',
  'geography_gist_union',
  'geography_gt',
  'geography_in',
  'geography_le',
  'geography_lt',
  'geography_out',
  'geography_overlaps',
  'geography_recv',
  'geography_send',
  'geography_spgist_choose_nd',
  'geography_spgist_compress_nd',
  'geography_spgist_config_nd',
  'geography_spgist_inner_consistent_nd',
  'geography_spgist_leaf_consistent_nd',
  'geography_spgist_picksplit_nd',
  'geography_typmod_in',
  'geography_typmod_out',
  'geom2d_brin_inclusion_add_value',
  'geom3d_brin_inclusion_add_value',
  'geom4d_brin_inclusion_add_value',
  'geometry',
  'geometry_above',
  'geometry_analyze',
  'geometry_below',
  'geometry_cmp',
  'geometry_contained_3d',
  'geometry_contains',
  'geometry_contains_3d',
  'geometry_contains_nd',
  'geometry_distance_box',
  'geometry_distance_centroid',
  'geometry_distance_centroid_nd',
  'geometry_distance_cpa',
  'geometry_eq',
  'geometry_ge',
  'geometry_gist_compress_2d',
  'geometry_gist_compress_nd',
  'geometry_gist_consistent_2d',
  'geometry_gist_consistent_nd',
  'geometry_gist_decompress_2d',
  'geometry_gist_decompress_nd',
  'geometry_gist_distance_2d',
  'geometry_gist_distance_nd',
  'geometry_gist_penalty_2d',
  'geometry_gist_penalty_nd',
  'geometry_gist_picksplit_2d',
  'geometry_gist_picksplit_nd',
  'geometry_gist_same_2d',
  'geometry_gist_same_nd',
  'geometry_gist_sortsupport_2d',
  'geometry_gist_union_2d',
  'geometry_gist_union_nd',
  'geometry_gt',
  'geometry_hash',
  'geometry_in',
  'geometry_le',
  'geometry_left',
  'geometry_lt',
  'geometry_out',
  'geometry_overabove',
  'geometry_overbelow',
  'geometry_overlaps',
  'geometry_overlaps_3d',
  'geometry_overlaps_nd',
  'geometry_overleft',
  'geometry_overright',
  'geometry_recv',
  'geometry_right',
  'geometry_same',
  'geometry_same_3d',
  'geometry_same_nd',
  'geometry_send',
  'geometry_sortsupport',
  'geometry_spgist_choose_2d',
  'geometry_spgist_choose_3d',
  'geometry_spgist_choose_nd',
  'geometry_spgist_compress_2d',
  'geometry_spgist_compress_3d',
  'geometry_spgist_compress_nd',
  'geometry_spgist_config_2d',
  'geometry_spgist_config_3d',
  'geometry_spgist_config_nd',
  'geometry_spgist_inner_consistent_2d',
  'geometry_spgist_inner_consistent_3d',
  'geometry_spgist_inner_consistent_nd',
  'geometry_spgist_leaf_consistent_2d',
  'geometry_spgist_leaf_consistent_3d',
  'geometry_spgist_leaf_consistent_nd',
  'geometry_spgist_picksplit_2d',
  'geometry_spgist_picksplit_3d',
  'geometry_spgist_picksplit_nd',
  'geometry_typmod_in',
  'geometry_typmod_out',
  'geometry_within',
  'geometry_within_nd',
  'geometrytype',
  'geomfromewkb',
  'geomfromewkt',
  'get_email_for_username',
  'get_proj4_from_srid',
  'gettransactionid',
  'gidx_in',
  'gidx_out',
  'gserialized_gist_joinsel_2d',
  'gserialized_gist_joinsel_nd',
  'gserialized_gist_sel_2d',
  'gserialized_gist_sel_nd',
  'haversine_m',
  'is_admin',
  'is_contact_verified',
  'is_contained_2d',
  'is_government',
  'json',
  'jsonb',
  'lockrow',
  'longtransactionsenabled',
  'notifications_clear_all',
  'notifications_mark',
  'notifications_mark_all',
  'notifications_me',
  'overlaps_2d',
  'overlaps_geog',
  'overlaps_nd',
  'path',
  'pgis_asflatgeobuf_finalfn',
  'pgis_asflatgeobuf_transfn',
  'pgis_asgeobuf_finalfn',
  'pgis_asgeobuf_transfn',
  'pgis_asmvt_combinefn',
  'pgis_asmvt_deserialfn',
  'pgis_asmvt_finalfn',
  'pgis_asmvt_serialfn',
  'pgis_asmvt_transfn',
  'pgis_geometry_accum_transfn',
  'pgis_geometry_clusterintersecting_finalfn',
  'pgis_geometry_clusterwithin_finalfn',
  'pgis_geometry_collect_finalfn',
  'pgis_geometry_makeline_finalfn',
  'pgis_geometry_polygonize_finalfn',
  'pgis_geometry_union_parallel_combinefn',
  'pgis_geometry_union_parallel_deserialfn',
  'pgis_geometry_union_parallel_finalfn',
  'pgis_geometry_union_parallel_serialfn',
  'pgis_geometry_union_parallel_transfn',
  'point',
  'polygon',
  'populate_geometry_columns',
  'postgis_addbbox',
  'postgis_cache_bbox',
  'postgis_constraint_dims',
  'postgis_constraint_srid',
  'postgis_constraint_type',
  'postgis_dropbbox',
  'postgis_extensions_upgrade',
  'postgis_full_version',
  'postgis_geos_noop',
  'postgis_geos_version',
  'postgis_getbbox',
  'postgis_hasbbox',
  'postgis_index_supportfn',
  'postgis_lib_build_date',
  'postgis_lib_revision',
  'postgis_lib_version',
  'postgis_libjson_version',
  'postgis_liblwgeom_version',
  'postgis_libprotobuf_version',
  'postgis_libxml_version',
  'postgis_noop',
  'postgis_proj_version',
  'postgis_scripts_build_date',
  'postgis_scripts_installed',
  'postgis_scripts_released',
  'postgis_svn_version',
  'postgis_transform_geometry',
  'postgis_type_name',
  'postgis_typmod_dims',
  'postgis_typmod_srid',
  'postgis_typmod_type',
  'postgis_version',
  'postgis_wagyu_version',
  'profile_me',
  'regexp_match',
  'regexp_matches',
  'regexp_replace',
  'regexp_split_to_array',
  'regexp_split_to_table',
  'replace',
  'reports_nearby',
  'spheroid_in',
  'spheroid_out',
  'split_part',
  'st_3dclosestpoint',
  'st_3ddfullywithin',
  'st_3ddistance',
  'st_3ddwithin',
  'st_3dintersects',
  'st_3dlength',
  'st_3dlineinterpolatepoint',
  'st_3dlongestline',
  'st_3dmakebox',
  'st_3dmaxdistance',
  'st_3dperimeter',
  'st_3dshortestline',
  'st_addmeasure',
  'st_addpoint',
  'st_affine',
  'st_angle',
  'st_area',
  'st_area2d',
  'st_asbinary',
  'st_asencodedpolyline',
  'st_asewkb',
  'st_asewkt',
  'st_asgeojson',
  'st_asgml',
  'st_ashexewkb',
  'st_askml',
  'st_aslatlontext',
  'st_asmarc21',
  'st_asmvtgeom',
  'st_assvg',
  'st_astext',
  'st_astwkb',
  'st_asx3d',
  'st_azimuth',
  'st_bdmpolyfromtext',
  'st_bdpolyfromtext',
  'st_boundary',
  'st_boundingdiagonal',
  'st_box2dfromgeohash',
  'st_buffer',
  'st_buildarea',
  'st_centroid',
  'st_chaikinsmoothing',
  'st_cleangeometry',
  'st_clipbybox2d',
  'st_closestpoint',
  'st_closestpointofapproach',
  'st_clusterintersecting',
  'st_clusterwithin',
  'st_collect',
  'st_collectionextract',
  'st_collectionhomogenize',
  'st_combinebbox',
  'st_concavehull',
  'st_contains',
  'st_containsproperly',
  'st_convexhull',
  'st_coorddim',
  'st_coveredby',
  'st_covers',
  'st_cpawithin',
  'st_crosses',
  'st_curvetoline',
  'st_delaunaytriangles',
  'st_dfullywithin',
  'st_difference',
  'st_dimension',
  'st_disjoint',
  'st_distance',
  'st_distancecpa',
  'st_distancesphere',
  'st_distancespheroid',
  'st_dump',
  'st_dumppoints',
  'st_dumprings',
  'st_dumpsegments',
  'st_dwithin',
  'st_endpoint',
  'st_envelope',
  'st_equals',
  'st_estimatedextent',
  'st_expand',
  'st_exteriorring',
  'st_filterbym',
  'st_findextent',
  'st_flipcoordinates',
  'st_force2d',
  'st_force3d',
  'st_force3dm',
  'st_force3dz',
  'st_force4d',
  'st_forcecollection',
  'st_forcecurve',
  'st_forcepolygonccw',
  'st_forcepolygoncw',
  'st_forcerhr',
  'st_forcesfs',
  'st_frechetdistance',
  'st_fromflatgeobuf',
  'st_fromflatgeobuftotable',
  'st_generatepoints',
  'st_geogfromtext',
  'st_geogfromwkb',
  'st_geographyfromtext',
  'st_geohash',
  'st_geomcollfromtext',
  'st_geomcollfromwkb',
  'st_geometricmedian',
  'st_geometryfromtext',
  'st_geometryn',
  'st_geometrytype',
  'st_geomfromewkb',
  'st_geomfromewkt',
  'st_geomfromgeohash',
  'st_geomfromgeojson',
  'st_geomfromgml',
  'st_geomfromkml',
  'st_geomfrommarc21',
  'st_geomfromtext',
  'st_geomfromtwkb',
  'st_geomfromwkb',
  'st_gmltosql',
  'st_hasarc',
  'st_hausdorffdistance',
  'st_hexagon',
  'st_hexagongrid',
  'st_interiorringn',
  'st_interpolatepoint',
  'st_intersection',
  'st_intersects',
  'st_isclosed',
  'st_iscollection',
  'st_isempty',
  'st_ispolygonccw',
  'st_ispolygoncw',
  'st_isring',
  'st_issimple',
  'st_isvalid',
  'st_isvaliddetail',
  'st_isvalidreason',
  'st_isvalidtrajectory',
  'st_length',
  'st_length2d',
  'st_length2dspheroid',
  'st_lengthspheroid',
  'st_letters',
  'st_linecrossingdirection',
  'st_linefromencodedpolyline',
  'st_linefrommultipoint',
  'st_linefromtext',
  'st_linefromwkb',
  'st_lineinterpolatepoint',
  'st_lineinterpolatepoints',
  'st_linelocatepoint',
  'st_linemerge',
  'st_linestringfromwkb',
  'st_linesubstring',
  'st_linetocurve',
  'st_locatealong',
  'st_locatebetween',
  'st_locatebetweenelevations',
  'st_longestline',
  'st_m',
  'st_makebox2d',
  'st_makeenvelope',
  'st_makeline',
  'st_makepoint',
  'st_makepointm',
  'st_makepolygon',
  'st_makevalid',
  'st_maxdistance',
  'st_maximuminscribedcircle',
  'st_memsize',
  'st_minimumboundingcircle',
  'st_minimumboundingradius',
  'st_minimumclearance',
  'st_minimumclearanceline',
  'st_mlinefromtext',
  'st_mlinefromwkb',
  'st_mpointfromtext',
  'st_mpointfromwkb',
  'st_mpolyfromtext',
  'st_mpolyfromwkb',
  'st_multi',
  'st_multilinefromwkb',
  'st_multilinestringfromtext',
  'st_multipointfromtext',
  'st_multipointfromwkb',
  'st_multipolyfromwkb',
  'st_multipolygonfromtext',
  'st_ndims',
  'st_node',
  'st_normalize',
  'st_npoints',
  'st_nrings',
  'st_numgeometries',
  'st_numinteriorring',
  'st_numinteriorrings',
  'st_numpatches',
  'st_numpoints',
  'st_offsetcurve',
  'st_orderingequals',
  'st_orientedenvelope',
  'st_overlaps',
  'st_patchn',
  'st_perimeter',
  'st_perimeter2d',
  'st_point',
  'st_pointfromgeohash',
  'st_pointfromtext',
  'st_pointfromwkb',
  'st_pointinsidecircle',
  'st_pointm',
  'st_pointn',
  'st_pointonsurface',
  'st_points',
  'st_pointz',
  'st_pointzm',
  'st_polyfromtext',
  'st_polyfromwkb',
  'st_polygon',
  'st_polygonfromtext',
  'st_polygonfromwkb',
  'st_polygonize',
  'st_project',
  'st_quantizecoordinates',
  'st_reduceprecision',
  'st_relate',
  'st_relatematch',
  'st_removepoint',
  'st_removerepeatedpoints',
  'st_reverse',
  'st_rotate',
  'st_rotatex',
  'st_rotatey',
  'st_rotatez',
  'st_scale',
  'st_scroll',
  'st_segmentize',
  'st_seteffectivearea',
  'st_setpoint',
  'st_setsrid',
  'st_sharedpaths',
  'st_shiftlongitude',
  'st_shortestline',
  'st_simplify',
  'st_simplifypolygonhull',
  'st_simplifypreservetopology',
  'st_simplifyvw',
  'st_snap',
  'st_snaptogrid',
  'st_split',
  'st_square',
  'st_squaregrid',
  'st_srid',
  'st_startpoint',
  'st_subdivide',
  'st_summary',
  'st_swapordinates',
  'st_symdifference',
  'st_symmetricdifference',
  'st_tileenvelope',
  'st_touches',
  'st_transform',
  'st_translate',
  'st_transscale',
  'st_triangulatepolygon',
  'st_unaryunion',
  'st_union',
  'st_voronoilines',
  'st_voronoipolygons',
  'st_within',
  'st_wkbtosql',
  'st_wkttosql',
  'st_wrapx',
  'st_x',
  'st_xmax',
  'st_xmin',
  'st_y',
  'st_ymax',
  'st_ymin',
  'st_z',
  'st_zmax',
  'st_zmflag',
  'st_zmin',
  'strpos',
  'submit_verification',
  'text',
  'texticlike',
  'texticnlike',
  'texticregexeq',
  'texticregexne',
  'tg_audit',
  'tg_bug_set_user',
  'tg_enforce_verified_reporter',
  'tg_prevent_self_flagging',
  'tg_set_updated_at',
  'tg_sync_geog',
  'tg_sync_two_factor_status',
  'tg_users_set_username',
  'translate',
  'unlockrows',
  'update_profile_email',
  'update_profile_phone',
  'updategeometrysrid',
  'upsert_current_user'
];

const requiredExtensions = [
  'postgis',
  'postgis_raster',
  'postgis_topology',
  'postgis_sfcgal',
  'pgcrypto',
  'uuid-ossp',
  'citext'
];

const normalize = (name) => name.trim().toLowerCase();

async function main() {
  const connectionString = process.env.DATABASE_URL;

  if (!connectionString) {
    console.error('DATABASE_URL is not set.');
    process.exit(1);
  }

  const client = new Client({
    connectionString,
    ssl: { rejectUnauthorized: false }
  });

  const allFunctions = Array.from(new Set(requiredFunctions.map(normalize))).filter(Boolean);

  try {
    await client.connect();

    const extensionResult = await client.query(
      'SELECT extname FROM pg_extension WHERE extname = ANY($1)',
      [requiredExtensions]
    );

    const presentExtensions = new Set(extensionResult.rows.map((row) => row.extname));
    const missingExtensions = requiredExtensions.filter((ext) => !presentExtensions.has(ext));

    const functionResult = await client.query(
      `SELECT proname, nspname, pg_get_function_identity_arguments(p.oid) AS args
         FROM pg_proc p
         JOIN pg_namespace n ON n.oid = p.pronamespace
        WHERE proname = ANY($1)
        ORDER BY proname, nspname`,
      [allFunctions]
    );

    const foundFunctions = new Map();
    for (const row of functionResult.rows) {
      const name = row.proname;
      const list = foundFunctions.get(name) ?? [];
      list.push({ schema: row.nspname, signature: `${row.proname}(${row.args})` });
      foundFunctions.set(name, list);
    }

    const missingFunctions = allFunctions.filter((fn) => !foundFunctions.has(fn));

    console.log('=== Extension Check ===');
    if (requiredExtensions.length === 0) {
      console.log('No extensions configured for verification.');
    } else if (missingExtensions.length === 0) {
      console.log('All required extensions are installed.');
    } else {
      console.log('Missing extensions:');
      for (const ext of missingExtensions) {
        console.log(`  - ${ext}`);
      }
    }

    console.log('\n=== Function Check ===');
    console.log(`Verified ${allFunctions.length} required function names.`);
    console.log(`Found ${foundFunctions.size} functions across schemas.`);

    if (missingFunctions.length > 0) {
      console.log('Missing function names:');
      for (const fn of missingFunctions) {
        console.log(`  - ${fn}`);
      }
    }

    if (foundFunctions.size > 0) {
      console.log('\nSample of resolved functions (name → schema.signature):');
      let displayed = 0;
      for (const [name, entries] of foundFunctions) {
        const first = entries[0];
        console.log(`  - ${name} → ${first.schema}.${first.signature}`);
        displayed += 1;
        if (displayed >= 20) {
          console.log('  …');
          break;
        }
      }
    }

    if (missingExtensions.length > 0 || missingFunctions.length > 0) {
      process.exitCode = 1;
    }
  } catch (error) {
    console.error('Verification failed:', error);
    process.exitCode = 1;
  } finally {
    await client.end().catch((closeError) => {
      console.error('Failed to close database connection:', closeError);
    });
  }
}

main();